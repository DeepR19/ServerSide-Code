CLient side domain name convert into IP address { BY the use of DNS }

TO make connect with the server there are three points or levels
    -> HTTP.methods (GET, POST, PUT, DELETE)
    -> HTTP.Header (browser-used, host-name, accept-lang, etc.)
    -> HTTP.Body (Used in post and put in MERN )

Statis wesite -> Only contain HTML, CSS, JS (or only FrontEnd)
Dynamic Website -> Conteins server side rendering(means FrontEnd and BackEnd)
API Based Website -> only send JSON data(clinet side render Tool)

--Application Programming information(API)--

-> Node is a runtime environment based on Google V8 Engine
-> NodeJS is single thread process

--{ Single thread contains event-loop and threads-pool }--

* Event-loop --> It is the process where all the heavy function and callbacks are deals with.
* threadPool --> heavy functions are executed by these threads

closeCallback --> Callback from server end, when IDE closed

--MORGAN response --third party middleware--
    * GET / 200 1.719 ms - 24
    * verbs route statusCode codeRunTime - responceSize

** Aggregation pipeline methods
    -> match
    -> group // _id is used to specify groupBy field
    -> unwind // it will destruct the array into single unit each
    -> month          
    -> push // name: {$push: '$firstName'} push the firstName into name array
    -> addFields // used to add a field in output

    -- functions
    -> sum
    -> min, max, avg
    -> lte, lt, gt, gte


**  'select' in schema used to hide detail of the particular field


** In mongoose schema we have object and option.
    -> object means those attribute on which we can perform query from server side
    -> option means it is a generated attribute from the DB attribute, but not present in DB data

    new mongoose.Schema({
        // objects
    },{
        // option or virtual attribute is present in output or not { virtuals: true || false }
    });

    add virtual attribute,
    schemaName.virtual('new_Attribute_Name').get(Function{
        return queryOnData_Of_DB
    })
    // here get is used to receive the data of attribute which present in DB {acts as a getter function}



** Middleware in mongoose
    -> Document Middleware
        It is used before and after of mongoose document work
        Ex:- pre, post command on schema 

        schemaName.pre("operation_of_mongoose_onDoc", function(next){
            //operation before the 'operation_of_mongoose_onDoc'
            
            next(); // because it is a middleware
        })

        Ex:- "operation_of_mongoose" is may be .save() or .create()

    -> Query Middleware
        it is similar as Document middleware, but here operation_of_mongoose_onDoc is replaced by mongoose_query_operation

        schemaName.pre("mongoose_query_operation", function(next){
            //operation before the 'mongoose_query_operation'
            
            next(); // because it is a middleware
        })

        Ex:- "operation_of_mongoose" is may be .find(), .findOne, .delete(), .remove(), .update() etc...

        RegEx for all find operation -- /^find/
            // a string is started from find 

    -> Aggregation Middleware
        it is done before and after the aggregation function

        it is similar as Document middleware, but here operation_of_mongoose_onDoc is replaced by mongoose_query_operation

        schemaName.pre("aggregate", function(next){
            //operation before the 'aggregate'

            console.log( this.pipeline() );
                // here this is aggregation pipeline
            
            next(); // because it is a middleware
        })


        ** this.pipeline().unshift in array is used to add the data in front of the array **
        ** this.pipeline().shift in array is used to add the data in back of the array **

** Express works on "Fat Model and Thin Controller" ** 

** Build-in-dataValidator -- require, maxLength, minLength, min, max, enum etc...

- enum tells only given values are allowed
    Ex:- enum: ["easy", "hard", "medium"] // only valid for Strings


** Custom Validator
    In schema pass 'validate'

    const userSchema = new mongoose.Schema({
        firstName:{
            type: String,
            required: [true, "user must have a firstname"],
            validate: {
                validator: function(){
                    this;
                    // In validator, this is used only when DOC is created, not for updated
                },
                message: "error message"
            }
        }
    });


** Errors
    -> Operational Errors
        problem that we can predict will happens at some point,
        some we just need to handle them in advance.
        > Invalid path access
        > Failed to connect to server
        > Failed to connect to database
        > Request timeout
        
    -> Programming Errors
        Bugs that we developer introduce into our code.
        Difficult to find and handle.
        > Reading properties on undefined
        > Passing a number where an object is expected
        > Using await without async
    
** Operational Errors Type
    -> CastError // when user input is similar, but not valid data
    -> DuplicateError {MongoError} // when user enter the similar value present in DB, which is unique
    -> ValidationError // this error occurs due to validation



{ '100': 'Continue',
  '101': 'Switching Protocols',
  '102': 'Processing',
  '200': 'OK',
  '201': 'Created',
  '202': 'Accepted',
  '203': 'Non-Authoritative Information',
  '204': 'No Content',
  '205': 'Reset Content',
  '206': 'Partial Content',
  '207': 'Multi-Status',
  '300': 'Multiple Choices',
  '301': 'Moved Permanently',
  '302': 'Moved Temporarily',
  '303': 'See Other',
  '304': 'Not Modified',
  '305': 'Use Proxy',
  '307': 'Temporary Redirect',
  '400': 'Bad Request',
  '401': 'Unauthorized',
  '402': 'Payment Required',
  '403': 'Forbidden',
  '404': 'Not Found',
  '405': 'Method Not Allowed',
  '406': 'Not Acceptable',
  '407': 'Proxy Authentication Required',
  '408': 'Request Time-out',
  '409': 'Conflict',
  '410': 'Gone',
  '411': 'Length Required',
  '412': 'Precondition Failed',
  '413': 'Request Entity Too Large',
  '414': 'Request-URI Too Large',
  '415': 'Unsupported Media Type',
  '416': 'Requested Range Not Satisfiable',
  '417': 'Expectation Failed',
  '418': 'I\'m a teapot',
  '422': 'Unprocessable Entity',
  '423': 'Locked',
  '424': 'Failed Dependency',
  '425': 'Unordered Collection',
  '426': 'Upgrade Required',
  '428': 'Precondition Required',
  '429': 'Too Many Requests',
  '431': 'Request Header Fields Too Large',
  '500': 'Internal Server Error',
  '501': 'Not Implemented',
  '502': 'Bad Gateway',
  '503': 'Service Unavailable',
  '504': 'Gateway Time-out',
  '505': 'HTTP Version Not Supported',
  '506': 'Variant Also Negotiates',
  '507': 'Insufficient Storage',
  '509': 'Bandwidth Limit Exceeded',
  '510': 'Not Extended',
  '511': 'Network Authentication Required' }

